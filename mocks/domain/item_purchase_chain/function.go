// Code generated by MockGen. DO NOT EDIT.
// Source: app/domain/item_purchase_chain/type.go
//
// Generated by this command:
//
//	mockgen -source=app/domain/item_purchase_chain/type.go -destination=mocks/domain/item_purchase_chain/function.go
//

// Package mock_itempurchasechain is a generated GoMock package.
package mock_itempurchasechain

import (
	context "context"
	reflect "reflect"

	model "github.com/inventory-service/model"
	error_wrapper "github.com/inventory-service/lib/error_wrapper"
	gomock "go.uber.org/mock/gomock"
)

// MockItemPurchaseChainDomain is a mock of ItemPurchaseChainDomain interface.
type MockItemPurchaseChainDomain struct {
	ctrl     *gomock.Controller
	recorder *MockItemPurchaseChainDomainMockRecorder
	isgomock struct{}
}

// MockItemPurchaseChainDomainMockRecorder is the mock recorder for MockItemPurchaseChainDomain.
type MockItemPurchaseChainDomainMockRecorder struct {
	mock *MockItemPurchaseChainDomain
}

// NewMockItemPurchaseChainDomain creates a new mock instance.
func NewMockItemPurchaseChainDomain(ctrl *gomock.Controller) *MockItemPurchaseChainDomain {
	mock := &MockItemPurchaseChainDomain{ctrl: ctrl}
	mock.recorder = &MockItemPurchaseChainDomainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemPurchaseChainDomain) EXPECT() *MockItemPurchaseChainDomainMockRecorder {
	return m.recorder
}

// BulkUpdate mocks base method.
func (m *MockItemPurchaseChainDomain) BulkUpdate(ctx context.Context, payload []model.ItemPurchaseChainGet) *error_wrapper.ErrorWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpdate", ctx, payload)
	ret0, _ := ret[0].(*error_wrapper.ErrorWrapper)
	return ret0
}

// BulkUpdate indicates an expected call of BulkUpdate.
func (mr *MockItemPurchaseChainDomainMockRecorder) BulkUpdate(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpdate", reflect.TypeOf((*MockItemPurchaseChainDomain)(nil).BulkUpdate), ctx, payload)
}

// Create mocks base method.
func (m *MockItemPurchaseChainDomain) Create(ctx context.Context, itemID, branchID string, purchase model.Purchase) *error_wrapper.ErrorWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, itemID, branchID, purchase)
	ret0, _ := ret[0].(*error_wrapper.ErrorWrapper)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockItemPurchaseChainDomainMockRecorder) Create(ctx, itemID, branchID, purchase any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockItemPurchaseChainDomain)(nil).Create), ctx, itemID, branchID, purchase)
}

// Get mocks base method.
func (m *MockItemPurchaseChainDomain) Get(ctx context.Context, payload model.ItemPurchaseChain) ([]model.ItemPurchaseChainGet, *error_wrapper.ErrorWrapper) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, payload)
	ret0, _ := ret[0].([]model.ItemPurchaseChainGet)
	ret1, _ := ret[1].(*error_wrapper.ErrorWrapper)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockItemPurchaseChainDomainMockRecorder) Get(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockItemPurchaseChainDomain)(nil).Get), ctx, payload)
}

// Update mocks base method.
func (m *MockItemPurchaseChainDomain) Update(ctx context.Context, id string, payload model.ItemPurchaseChain) *error_wrapper.ErrorWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, payload)
	ret0, _ := ret[0].(*error_wrapper.ErrorWrapper)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockItemPurchaseChainDomainMockRecorder) Update(ctx, id, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockItemPurchaseChainDomain)(nil).Update), ctx, id, payload)
}
