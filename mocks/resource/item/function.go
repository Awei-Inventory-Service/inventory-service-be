// Code generated by MockGen. DO NOT EDIT.
// Source: app/resource/item/type.go
//
// Generated by this command:
//
//	mockgen -source=app/resource/item/type.go -destination=mocks/resource/item/function.go
//

// Package mock_item is a generated GoMock package.
package mock_item

import (
	reflect "reflect"

	model "github.com/inventory-service/model"
	error_wrapper "github.com/inventory-service/lib/error_wrapper"
	gomock "go.uber.org/mock/gomock"
)

// MockItemResource is a mock of ItemResource interface.
type MockItemResource struct {
	ctrl     *gomock.Controller
	recorder *MockItemResourceMockRecorder
	isgomock struct{}
}

// MockItemResourceMockRecorder is the mock recorder for MockItemResource.
type MockItemResourceMockRecorder struct {
	mock *MockItemResource
}

// NewMockItemResource creates a new mock instance.
func NewMockItemResource(ctrl *gomock.Controller) *MockItemResource {
	mock := &MockItemResource{ctrl: ctrl}
	mock.recorder = &MockItemResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemResource) EXPECT() *MockItemResourceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockItemResource) Create(item model.Item) *error_wrapper.ErrorWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", item)
	ret0, _ := ret[0].(*error_wrapper.ErrorWrapper)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockItemResourceMockRecorder) Create(item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockItemResource)(nil).Create), item)
}

// Delete mocks base method.
func (m *MockItemResource) Delete(id string) *error_wrapper.ErrorWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*error_wrapper.ErrorWrapper)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockItemResourceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockItemResource)(nil).Delete), id)
}

// FindAll mocks base method.
func (m *MockItemResource) FindAll() ([]model.Item, *error_wrapper.ErrorWrapper) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]model.Item)
	ret1, _ := ret[1].(*error_wrapper.ErrorWrapper)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockItemResourceMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockItemResource)(nil).FindAll))
}

// FindByID mocks base method.
func (m *MockItemResource) FindByID(id string) (*model.Item, *error_wrapper.ErrorWrapper) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*model.Item)
	ret1, _ := ret[1].(*error_wrapper.ErrorWrapper)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockItemResourceMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockItemResource)(nil).FindByID), id)
}

// Update mocks base method.
func (m *MockItemResource) Update(id string, item model.Item) *error_wrapper.ErrorWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, item)
	ret0, _ := ret[0].(*error_wrapper.ErrorWrapper)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockItemResourceMockRecorder) Update(id, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockItemResource)(nil).Update), id, item)
}
