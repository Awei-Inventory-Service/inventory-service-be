// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/inventory-service/resource/mongodb (interfaces: MongoDBCollectionWrapper,MongoDBDatabaseWrapper,MongoDBClientWrapper,MongoDBCursorWrapper,MongoDBSingleResultWrapper)
//
// Generated by this command:
//
//	mockgen -package mock_mongodb -destination mocks/mongodb_mock.go github.com/inventory-service/resource/mongodb MongoDBCollectionWrapper,MongoDBDatabaseWrapper,MongoDBClientWrapper,MongoDBCursorWrapper,MongoDBSingleResultWrapper
//

// Package mock_mongodb is a generated GoMock package.
package mock_mongodb

import (
	context "context"
	reflect "reflect"

	mongodb "github.com/inventory-service/resource/mongodb"
	mongo "go.mongodb.org/mongo-driver/mongo"
	options "go.mongodb.org/mongo-driver/mongo/options"
	readpref "go.mongodb.org/mongo-driver/mongo/readpref"
	gomock "go.uber.org/mock/gomock"
)

// MockMongoDBCollectionWrapper is a mock of MongoDBCollectionWrapper interface.
type MockMongoDBCollectionWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockMongoDBCollectionWrapperMockRecorder
	isgomock struct{}
}

// MockMongoDBCollectionWrapperMockRecorder is the mock recorder for MockMongoDBCollectionWrapper.
type MockMongoDBCollectionWrapperMockRecorder struct {
	mock *MockMongoDBCollectionWrapper
}

// NewMockMongoDBCollectionWrapper creates a new mock instance.
func NewMockMongoDBCollectionWrapper(ctrl *gomock.Controller) *MockMongoDBCollectionWrapper {
	mock := &MockMongoDBCollectionWrapper{ctrl: ctrl}
	mock.recorder = &MockMongoDBCollectionWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoDBCollectionWrapper) EXPECT() *MockMongoDBCollectionWrapperMockRecorder {
	return m.recorder
}

// DeleteOne mocks base method.
func (m *MockMongoDBCollectionWrapper) DeleteOne(ctx context.Context, filter any, opts ...*options.DeleteOptions) (*mongo.DeleteResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOne", varargs...)
	ret0, _ := ret[0].(*mongo.DeleteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockMongoDBCollectionWrapperMockRecorder) DeleteOne(ctx, filter any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockMongoDBCollectionWrapper)(nil).DeleteOne), varargs...)
}

// Find mocks base method.
func (m *MockMongoDBCollectionWrapper) Find(ctx context.Context, filter any, opts ...*options.FindOptions) (mongodb.MongoDBCursorWrapper, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(mongodb.MongoDBCursorWrapper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMongoDBCollectionWrapperMockRecorder) Find(ctx, filter any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMongoDBCollectionWrapper)(nil).Find), varargs...)
}

// FindOne mocks base method.
func (m *MockMongoDBCollectionWrapper) FindOne(ctx context.Context, filter any, opts ...*options.FindOneOptions) mongodb.MongoDBSingleResultWrapper {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOne", varargs...)
	ret0, _ := ret[0].(mongodb.MongoDBSingleResultWrapper)
	return ret0
}

// FindOne indicates an expected call of FindOne.
func (mr *MockMongoDBCollectionWrapperMockRecorder) FindOne(ctx, filter any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockMongoDBCollectionWrapper)(nil).FindOne), varargs...)
}

// InsertOne mocks base method.
func (m *MockMongoDBCollectionWrapper) InsertOne(ctx context.Context, document any, opts ...*options.InsertOneOptions) (*mongo.InsertOneResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, document}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertOne", varargs...)
	ret0, _ := ret[0].(*mongo.InsertOneResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockMongoDBCollectionWrapperMockRecorder) InsertOne(ctx, document any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, document}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockMongoDBCollectionWrapper)(nil).InsertOne), varargs...)
}

// UpdateOne mocks base method.
func (m *MockMongoDBCollectionWrapper) UpdateOne(ctx context.Context, filter, update any, opts ...*options.UpdateOptions) (*mongo.UpdateResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, filter, update}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOne", varargs...)
	ret0, _ := ret[0].(*mongo.UpdateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockMongoDBCollectionWrapperMockRecorder) UpdateOne(ctx, filter, update any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, filter, update}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockMongoDBCollectionWrapper)(nil).UpdateOne), varargs...)
}

// MockMongoDBDatabaseWrapper is a mock of MongoDBDatabaseWrapper interface.
type MockMongoDBDatabaseWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockMongoDBDatabaseWrapperMockRecorder
	isgomock struct{}
}

// MockMongoDBDatabaseWrapperMockRecorder is the mock recorder for MockMongoDBDatabaseWrapper.
type MockMongoDBDatabaseWrapperMockRecorder struct {
	mock *MockMongoDBDatabaseWrapper
}

// NewMockMongoDBDatabaseWrapper creates a new mock instance.
func NewMockMongoDBDatabaseWrapper(ctrl *gomock.Controller) *MockMongoDBDatabaseWrapper {
	mock := &MockMongoDBDatabaseWrapper{ctrl: ctrl}
	mock.recorder = &MockMongoDBDatabaseWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoDBDatabaseWrapper) EXPECT() *MockMongoDBDatabaseWrapperMockRecorder {
	return m.recorder
}

// Collection mocks base method.
func (m *MockMongoDBDatabaseWrapper) Collection(collectionName string, opts ...*options.CollectionOptions) mongodb.MongoDBCollectionWrapper {
	m.ctrl.T.Helper()
	varargs := []any{collectionName}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Collection", varargs...)
	ret0, _ := ret[0].(mongodb.MongoDBCollectionWrapper)
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockMongoDBDatabaseWrapperMockRecorder) Collection(collectionName any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{collectionName}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockMongoDBDatabaseWrapper)(nil).Collection), varargs...)
}

// MockMongoDBClientWrapper is a mock of MongoDBClientWrapper interface.
type MockMongoDBClientWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockMongoDBClientWrapperMockRecorder
	isgomock struct{}
}

// MockMongoDBClientWrapperMockRecorder is the mock recorder for MockMongoDBClientWrapper.
type MockMongoDBClientWrapperMockRecorder struct {
	mock *MockMongoDBClientWrapper
}

// NewMockMongoDBClientWrapper creates a new mock instance.
func NewMockMongoDBClientWrapper(ctrl *gomock.Controller) *MockMongoDBClientWrapper {
	mock := &MockMongoDBClientWrapper{ctrl: ctrl}
	mock.recorder = &MockMongoDBClientWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoDBClientWrapper) EXPECT() *MockMongoDBClientWrapperMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockMongoDBClientWrapper) Connect(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockMongoDBClientWrapperMockRecorder) Connect(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockMongoDBClientWrapper)(nil).Connect), ctx)
}

// Database mocks base method.
func (m *MockMongoDBClientWrapper) Database(name string, opts ...*options.DatabaseOptions) mongodb.MongoDBDatabaseWrapper {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Database", varargs...)
	ret0, _ := ret[0].(mongodb.MongoDBDatabaseWrapper)
	return ret0
}

// Database indicates an expected call of Database.
func (mr *MockMongoDBClientWrapperMockRecorder) Database(name any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockMongoDBClientWrapper)(nil).Database), varargs...)
}

// Disconnect mocks base method.
func (m *MockMongoDBClientWrapper) Disconnect(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockMongoDBClientWrapperMockRecorder) Disconnect(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockMongoDBClientWrapper)(nil).Disconnect), ctx)
}

// Ping mocks base method.
func (m *MockMongoDBClientWrapper) Ping(ctx context.Context, readPref *readpref.ReadPref) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx, readPref)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockMongoDBClientWrapperMockRecorder) Ping(ctx, readPref any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMongoDBClientWrapper)(nil).Ping), ctx, readPref)
}

// MockMongoDBCursorWrapper is a mock of MongoDBCursorWrapper interface.
type MockMongoDBCursorWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockMongoDBCursorWrapperMockRecorder
	isgomock struct{}
}

// MockMongoDBCursorWrapperMockRecorder is the mock recorder for MockMongoDBCursorWrapper.
type MockMongoDBCursorWrapperMockRecorder struct {
	mock *MockMongoDBCursorWrapper
}

// NewMockMongoDBCursorWrapper creates a new mock instance.
func NewMockMongoDBCursorWrapper(ctrl *gomock.Controller) *MockMongoDBCursorWrapper {
	mock := &MockMongoDBCursorWrapper{ctrl: ctrl}
	mock.recorder = &MockMongoDBCursorWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoDBCursorWrapper) EXPECT() *MockMongoDBCursorWrapperMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMongoDBCursorWrapper) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMongoDBCursorWrapperMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMongoDBCursorWrapper)(nil).Close), ctx)
}

// Decode mocks base method.
func (m *MockMongoDBCursorWrapper) Decode(val any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", val)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockMongoDBCursorWrapperMockRecorder) Decode(val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockMongoDBCursorWrapper)(nil).Decode), val)
}

// Err mocks base method.
func (m *MockMongoDBCursorWrapper) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockMongoDBCursorWrapperMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockMongoDBCursorWrapper)(nil).Err))
}

// Next mocks base method.
func (m *MockMongoDBCursorWrapper) Next(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockMongoDBCursorWrapperMockRecorder) Next(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockMongoDBCursorWrapper)(nil).Next), ctx)
}

// MockMongoDBSingleResultWrapper is a mock of MongoDBSingleResultWrapper interface.
type MockMongoDBSingleResultWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockMongoDBSingleResultWrapperMockRecorder
	isgomock struct{}
}

// MockMongoDBSingleResultWrapperMockRecorder is the mock recorder for MockMongoDBSingleResultWrapper.
type MockMongoDBSingleResultWrapperMockRecorder struct {
	mock *MockMongoDBSingleResultWrapper
}

// NewMockMongoDBSingleResultWrapper creates a new mock instance.
func NewMockMongoDBSingleResultWrapper(ctrl *gomock.Controller) *MockMongoDBSingleResultWrapper {
	mock := &MockMongoDBSingleResultWrapper{ctrl: ctrl}
	mock.recorder = &MockMongoDBSingleResultWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoDBSingleResultWrapper) EXPECT() *MockMongoDBSingleResultWrapperMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockMongoDBSingleResultWrapper) Decode(v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockMongoDBSingleResultWrapperMockRecorder) Decode(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockMongoDBSingleResultWrapper)(nil).Decode), v)
}
