// Code generated by MockGen. DO NOT EDIT.
// Source: internal/resource/purchase/type.go
//
// Generated by this command:
//
//	mockgen -source=internal/resource/purchase/type.go -destination=mocks/resource/purchase/function.go
//

// Package mock_purchase is a generated GoMock package.
package mock_purchase

import (
	reflect "reflect"

	model "github.com/inventory-service/model"
	error_wrapper "github.com/inventory-service/lib/error_wrapper"
	gomock "go.uber.org/mock/gomock"
)

// MockPurchaseResource is a mock of PurchaseResource interface.
type MockPurchaseResource struct {
	ctrl     *gomock.Controller
	recorder *MockPurchaseResourceMockRecorder
	isgomock struct{}
}

// MockPurchaseResourceMockRecorder is the mock recorder for MockPurchaseResource.
type MockPurchaseResourceMockRecorder struct {
	mock *MockPurchaseResource
}

// NewMockPurchaseResource creates a new mock instance.
func NewMockPurchaseResource(ctrl *gomock.Controller) *MockPurchaseResource {
	mock := &MockPurchaseResource{ctrl: ctrl}
	mock.recorder = &MockPurchaseResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPurchaseResource) EXPECT() *MockPurchaseResourceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPurchaseResource) Create(supplierId, branchId, itemId string, quantity int, purchaseCost float64) (*model.Purchase, *error_wrapper.ErrorWrapper) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", supplierId, branchId, itemId, quantity, purchaseCost)
	ret0, _ := ret[0].(*model.Purchase)
	ret1, _ := ret[1].(*error_wrapper.ErrorWrapper)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPurchaseResourceMockRecorder) Create(supplierId, branchId, itemId, quantity, purchaseCost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPurchaseResource)(nil).Create), supplierId, branchId, itemId, quantity, purchaseCost)
}

// Delete mocks base method.
func (m *MockPurchaseResource) Delete(id string) *error_wrapper.ErrorWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*error_wrapper.ErrorWrapper)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPurchaseResourceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPurchaseResource)(nil).Delete), id)
}

// FindAll mocks base method.
func (m *MockPurchaseResource) FindAll() ([]model.Purchase, *error_wrapper.ErrorWrapper) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]model.Purchase)
	ret1, _ := ret[1].(*error_wrapper.ErrorWrapper)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockPurchaseResourceMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockPurchaseResource)(nil).FindAll))
}

// FindByID mocks base method.
func (m *MockPurchaseResource) FindByID(id string) (*model.Purchase, *error_wrapper.ErrorWrapper) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*model.Purchase)
	ret1, _ := ret[1].(*error_wrapper.ErrorWrapper)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockPurchaseResourceMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockPurchaseResource)(nil).FindByID), id)
}

// Update mocks base method.
func (m *MockPurchaseResource) Update(id, supplierId, branchId, itemId string, quantity int, purchaseCost float64) *error_wrapper.ErrorWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, supplierId, branchId, itemId, quantity, purchaseCost)
	ret0, _ := ret[0].(*error_wrapper.ErrorWrapper)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPurchaseResourceMockRecorder) Update(id, supplierId, branchId, itemId, quantity, purchaseCost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPurchaseResource)(nil).Update), id, supplierId, branchId, itemId, quantity, purchaseCost)
}
