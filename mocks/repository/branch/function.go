// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/branch/type.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/branch/type.go -destination=mocks/repository/branch/function.go
//

// Package mock_branch is a generated GoMock package.
package mock_branch

import (
	reflect "reflect"

	model "github.com/inventory-service/internal/model"
	error_wrapper "github.com/inventory-service/lib/error_wrapper"
	gomock "go.uber.org/mock/gomock"
)

// MockBranchRepository is a mock of BranchRepository interface.
type MockBranchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBranchRepositoryMockRecorder
	isgomock struct{}
}

// MockBranchRepositoryMockRecorder is the mock recorder for MockBranchRepository.
type MockBranchRepositoryMockRecorder struct {
	mock *MockBranchRepository
}

// NewMockBranchRepository creates a new mock instance.
func NewMockBranchRepository(ctrl *gomock.Controller) *MockBranchRepository {
	mock := &MockBranchRepository{ctrl: ctrl}
	mock.recorder = &MockBranchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBranchRepository) EXPECT() *MockBranchRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBranchRepository) Create(name, location, branchManagerId string) *error_wrapper.ErrorWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name, location, branchManagerId)
	ret0, _ := ret[0].(*error_wrapper.ErrorWrapper)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBranchRepositoryMockRecorder) Create(name, location, branchManagerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBranchRepository)(nil).Create), name, location, branchManagerId)
}

// Delete mocks base method.
func (m *MockBranchRepository) Delete(id string) *error_wrapper.ErrorWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*error_wrapper.ErrorWrapper)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBranchRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBranchRepository)(nil).Delete), id)
}

// FindAll mocks base method.
func (m *MockBranchRepository) FindAll() ([]model.Branch, *error_wrapper.ErrorWrapper) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]model.Branch)
	ret1, _ := ret[1].(*error_wrapper.ErrorWrapper)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockBranchRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockBranchRepository)(nil).FindAll))
}

// FindByID mocks base method.
func (m *MockBranchRepository) FindByID(id string) (*model.Branch, *error_wrapper.ErrorWrapper) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*model.Branch)
	ret1, _ := ret[1].(*error_wrapper.ErrorWrapper)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockBranchRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockBranchRepository)(nil).FindByID), id)
}

// Update mocks base method.
func (m *MockBranchRepository) Update(id, name, location, branchManagerId string) *error_wrapper.ErrorWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, name, location, branchManagerId)
	ret0, _ := ret[0].(*error_wrapper.ErrorWrapper)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBranchRepositoryMockRecorder) Update(id, name, location, branchManagerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBranchRepository)(nil).Update), id, name, location, branchManagerId)
}
