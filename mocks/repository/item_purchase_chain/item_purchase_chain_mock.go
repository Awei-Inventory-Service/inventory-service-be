// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/item_purchase_chain/type.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/item_purchase_chain/type.go -destination=mocks/internal/repository/item_purchase_chain/function.go
//

// Package mock_itempurchasechain is a generated GoMock package.
package mock_itempurchasechain

import (
	context "context"
	reflect "reflect"

	model "github.com/inventory-service/internal/model"
	error_wrapper "github.com/inventory-service/lib/error_wrapper"
	gomock "go.uber.org/mock/gomock"
)

// MockItemPurchaseChainRepository is a mock of ItemPurchaseChainRepository interface.
type MockItemPurchaseChainRepository struct {
	ctrl     *gomock.Controller
	recorder *MockItemPurchaseChainRepositoryMockRecorder
	isgomock struct{}
}

// MockItemPurchaseChainRepositoryMockRecorder is the mock recorder for MockItemPurchaseChainRepository.
type MockItemPurchaseChainRepositoryMockRecorder struct {
	mock *MockItemPurchaseChainRepository
}

// NewMockItemPurchaseChainRepository creates a new mock instance.
func NewMockItemPurchaseChainRepository(ctrl *gomock.Controller) *MockItemPurchaseChainRepository {
	mock := &MockItemPurchaseChainRepository{ctrl: ctrl}
	mock.recorder = &MockItemPurchaseChainRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemPurchaseChainRepository) EXPECT() *MockItemPurchaseChainRepositoryMockRecorder {
	return m.recorder
}

// BulkUpdate mocks base method.
func (m *MockItemPurchaseChainRepository) BulkUpdate(ctx context.Context, payload []model.ItemPurchaseChainGet) *error_wrapper.ErrorWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpdate", ctx, payload)
	ret0, _ := ret[0].(*error_wrapper.ErrorWrapper)
	return ret0
}

// BulkUpdate indicates an expected call of BulkUpdate.
func (mr *MockItemPurchaseChainRepositoryMockRecorder) BulkUpdate(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpdate", reflect.TypeOf((*MockItemPurchaseChainRepository)(nil).BulkUpdate), ctx, payload)
}

// Create mocks base method.
func (m *MockItemPurchaseChainRepository) Create(ctx context.Context, itemID, branchID string, purchase model.Purchase) *error_wrapper.ErrorWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, itemID, branchID, purchase)
	ret0, _ := ret[0].(*error_wrapper.ErrorWrapper)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockItemPurchaseChainRepositoryMockRecorder) Create(ctx, itemID, branchID, purchase any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockItemPurchaseChainRepository)(nil).Create), ctx, itemID, branchID, purchase)
}

// Get mocks base method.
func (m *MockItemPurchaseChainRepository) Get(ctx context.Context, payload model.ItemPurchaseChain) ([]model.ItemPurchaseChainGet, *error_wrapper.ErrorWrapper) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, payload)
	ret0, _ := ret[0].([]model.ItemPurchaseChainGet)
	ret1, _ := ret[1].(*error_wrapper.ErrorWrapper)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockItemPurchaseChainRepositoryMockRecorder) Get(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockItemPurchaseChainRepository)(nil).Get), ctx, payload)
}

// Update mocks base method.
func (m *MockItemPurchaseChainRepository) Update(ctx context.Context, id string, payload model.ItemPurchaseChain) *error_wrapper.ErrorWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, payload)
	ret0, _ := ret[0].(*error_wrapper.ErrorWrapper)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockItemPurchaseChainRepositoryMockRecorder) Update(ctx, id, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockItemPurchaseChainRepository)(nil).Update), ctx, id, payload)
}
